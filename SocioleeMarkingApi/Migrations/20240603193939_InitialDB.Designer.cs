// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocioleeMarkingApi.Models.Database;

#nullable disable

namespace SocioleeMarkingApi.Migrations
{
    [DbContext(typeof(SocioleeDesignContext))]
    [Migration("20240603193939_InitialDB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SocioleeMarkingApi.Models.Database.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__Assets__3214EC06AE699C37");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex(new[] { "UserId" }, "IX_AssetsUserId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "UserId" }, "IX_AssetsUserId"));

                    b.HasIndex(new[] { "Id" }, "UQ_AssetId")
                        .IsUnique();

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("SocioleeMarkingApi.Models.Database.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommentReplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__Comments__3214EC06A446893B");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ContentId" }, "IX_CommentContentId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "ContentId" }, "IX_CommentContentId"));

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SocioleeMarkingApi.Models.Database.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssetType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Contents__3214EC06E81B6CCB");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex(new[] { "ContentType" }, "IX_ContentType");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "ContentType" }, "IX_ContentType"));

                    b.HasIndex(new[] { "Id" }, "UQ_Content_Id")
                        .IsUnique();

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("SocioleeMarkingApi.Models.Database.EmailTracking", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Subscribed")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__EmailTra__3214EC07DC3C7A39");

                    b.ToTable("EmailTrackings");
                });

            modelBuilder.Entity("SocioleeMarkingApi.Models.Database.LikedComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__LikedCom__3214EC062FEEE37C");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex(new[] { "CommentId" }, "IX_CommentId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "CommentId" }, "IX_CommentId"));

                    b.ToTable("LikedComments");
                });

            modelBuilder.Entity("SocioleeMarkingApi.Models.Database.LikedContent", b =>
                {
                    b.Property<Guid>("ContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContentId", "UserId")
                        .HasName("PK__LikedCon__F87F24DBF6CC2350");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ContentId", "UserId"), false);

                    b.HasIndex(new[] { "ContentId" }, "IX_LikedContentContentId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "ContentId" }, "IX_LikedContentContentId"));

                    b.HasIndex(new[] { "ContentId", "UserId" }, "UQ_ContentId")
                        .IsUnique();

                    b.HasIndex(new[] { "ContentId", "UserId" }, "UQ_UserLiked")
                        .IsUnique();

                    b.ToTable("LikedContents");
                });

            modelBuilder.Entity("SocioleeMarkingApi.Models.Database.PaymentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PfPaymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Token")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__PaymentD__3214EC07B1097670");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("SocioleeMarkingApi.Models.Database.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("profilePictureId");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RefreshTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC07C3EC83A0");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SocioleeMarkingApi.Models.Database.Asset", b =>
                {
                    b.HasOne("SocioleeMarkingApi.Models.Database.User", null)
                        .WithMany("Assets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocioleeMarkingApi.Models.Database.Comment", b =>
                {
                    b.HasOne("SocioleeMarkingApi.Models.Database.Content", null)
                        .WithMany("Comments")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocioleeMarkingApi.Models.Database.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Users_Id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocioleeMarkingApi.Models.Database.LikedComment", b =>
                {
                    b.HasOne("SocioleeMarkingApi.Models.Database.Comment", "Comment")
                        .WithMany("LikedComments")
                        .HasForeignKey("CommentId")
                        .IsRequired()
                        .HasConstraintName("FK_Liked_Comment");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("SocioleeMarkingApi.Models.Database.LikedContent", b =>
                {
                    b.HasOne("SocioleeMarkingApi.Models.Database.Content", null)
                        .WithMany("LikedContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocioleeMarkingApi.Models.Database.PaymentDetail", b =>
                {
                    b.HasOne("SocioleeMarkingApi.Models.Database.User", null)
                        .WithMany("PaymentDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocioleeMarkingApi.Models.Database.Comment", b =>
                {
                    b.Navigation("LikedComments");
                });

            modelBuilder.Entity("SocioleeMarkingApi.Models.Database.Content", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LikedContents");
                });

            modelBuilder.Entity("SocioleeMarkingApi.Models.Database.User", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Comments");

                    b.Navigation("PaymentDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
